# ansible/playbooks/install_haproxy_keepalived.yml
- name: Instalar y Configurar HAProxy + Keepalived para Kubernetes API e Ingress
  hosts: haproxy_keepalived
  become: true
  vars:
    haproxy_config_dir: "/etc/haproxy"
    keepalived_config_dir: "/etc/keepalived"
    haproxy_config_template: "../../templates/haproxy/haproxy.cfg.j2"
    keepalived_config_template: "../../templates/keepalived/keepalived.conf.j2"
    haproxy_socket_dir: "/var/lib/haproxy"
    haproxy_socket_file: "/var/lib/haproxy/admin.sock"
    api_vip: "10.17.5.10"
    second_vip: "10.17.5.30"

  tasks:
    - name: Limpiar la caché de DNF
      command: dnf clean all

    - name: Actualizar paquetes del sistema
      command: dnf update -y

    - name: Verificar conectividad a internet
      command: ping -c 3 8.8.8.8
      register: ping_output
      failed_when: ping_output.rc != 0
      ignore_errors: true

    - name: Verificar disponibilidad de repositorios
      command: dnf repolist
      register: repo_status
      failed_when: repo_status.rc != 0
      ignore_errors: true

    - name: Instalar paquetes requeridos
      yum:
        name:
          - net-tools
          - haproxy
          - keepalived
        state: present

    - name: Crear grupo haproxy si no existe
      group:
        name: haproxy
        state: present

    - name: Crear usuario haproxy si no existe
      user:
        name: haproxy
        group: haproxy
        shell: /sbin/nologin
        system: yes
        create_home: no
        state: present

    - name: Crear directorio para el socket de HAProxy
      file:
        path: "{{ haproxy_socket_dir }}"
        state: directory
        owner: haproxy
        group: haproxy
        mode: "0750"

    - name: Detener HAProxy si está activo
      systemd:
        name: haproxy
        state: stopped
      ignore_errors: true

    - name: Eliminar socket anterior de HAProxy
      file:
        path: "{{ haproxy_socket_file }}"
        state: absent

    - name: Asegurar limpieza de unidad HAProxy personalizada (si existiera)
      file:
        path: /etc/systemd/system/haproxy.service
        state: absent
      ignore_errors: true

    - name: Crear directorio de sobreescritura systemd para HAProxy
      file:
        path: /etc/systemd/system/haproxy.service.d
        state: directory
        mode: "0755"

    - name: Crear sobreescritura systemd para HAProxy (corrigiendo ExecStart)
      copy:
        dest: /etc/systemd/system/haproxy.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/sbin/haproxy -Ws -f {{ haproxy_config_dir }}/haproxy.cfg

    - name: Recargar systemd tras sobreescritura
      command: systemctl daemon-reexec

    - name: Establecer contexto SELinux para socket (si aplica)
      sefcontext:
        target: "{{ haproxy_socket_dir }}(/.*)?"
        setype: var_run_t
        state: present
      when: ansible_selinux.status == "enabled"
      ignore_errors: true

    - name: Reetiquetar archivos bajo /var/lib/haproxy
      command: restorecon -RFv {{ haproxy_socket_dir }}
      when: ansible_selinux.status == "enabled"
      ignore_errors: true

    - name: Permitir a HAProxy conectarse a cualquier puerto (SELinux)
      command: setsebool -P haproxy_connect_any 1
      when: ansible_selinux.status == "enabled"
      ignore_errors: true

    - name: Detectar interfaz activa para Keepalived
      command: ip route get 8.8.8.8
      register: default_route

    - name: Definir interfaz para Keepalived
      set_fact:
        keepalived_interface: "{{ default_route.stdout.split('dev')[1].split()[0] }}"

    - name: Crear directorio de configuración de HAProxy
      file:
        path: "{{ haproxy_config_dir }}"
        state: directory
        mode: "0755"

    - name: Plantilla de configuración de HAProxy
      template:
        src: "{{ haproxy_config_template }}"
        dest: "{{ haproxy_config_dir }}/haproxy.cfg"
        owner: root
        group: root
        mode: "0644"
      notify: Reiniciar HAProxy

    - name: Crear directorio de configuración de Keepalived
      file:
        path: "{{ keepalived_config_dir }}"
        state: directory
        mode: "0755"

    - name: Plantilla de configuración de Keepalived
      template:
        src: "{{ keepalived_config_template }}"
        dest: "{{ keepalived_config_dir }}/keepalived.conf"
        owner: root
        group: root
        mode: "0644"
      notify: Reiniciar Keepalived

    - name: Validar configuración de HAProxy
      command: haproxy -c -f {{ haproxy_config_dir }}/haproxy.cfg
      register: haproxy_check
      changed_when: false
      failed_when: haproxy_check.rc != 0

    - name: Habilitar y arrancar Keepalived
      systemd:
        name: keepalived
        enabled: true
        state: started

    - name: Habilitar HAProxy sin iniciarlo aún
      systemd:
        name: haproxy
        enabled: true
        state: stopped

    - name: Verificar si al menos una VIP está activa (API o Ingress)
      shell: |
        ip a | grep -q "{{ api_vip }}" || ip a | grep -q "{{ second_vip }}"
      register: vip_ready
      changed_when: false
      failed_when: false

    - name: Iniciar HAProxy solo si alguna VIP está presente
      systemd:
        name: haproxy
        state: restarted
      register: haproxy_start
      failed_when: false
      changed_when: haproxy_start.rc == 0
      when: vip_ready.rc == 0

  handlers:
    - name: Recargar systemd
      command: systemctl daemon-reexec

    - name: Reiniciar HAProxy
      systemd:
        name: haproxy
        state: restarted

    - name: Reiniciar Keepalived
      systemd:
        name: keepalived
        state: restarted
