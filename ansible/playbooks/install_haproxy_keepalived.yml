# ansible/playbooks/install_haproxy_keepalived.yml
- name: Instalar y Configurar HAProxy + Keepalived para Kubernetes API e Ingress
  hosts: haproxy_keepalived
  become: true
  vars:
    haproxy_config_dir: "/etc/haproxy"
    keepalived_config_dir: "/etc/keepalived"
    haproxy_socket_dir: "/var/lib/haproxy"
    haproxy_socket_file: "/var/lib/haproxy/admin.sock"
    haproxy_config_template: "../../templates/haproxy/haproxy.cfg.j2"
    keepalived_config_template: "../../templates/keepalived/keepalived.conf.j2"
    api_vip: "10.17.5.10"
    second_vip: "10.17.5.30"

  tasks:

    - name: Instalar dependencias y preparar entorno
      block:

        - name: Limpiar la caché de DNF
          command: dnf clean all

        - name: Actualizar paquetes del sistema
          command: dnf update -y

        - name: Verificar conectividad a internet
          command: ping -c 3 8.8.8.8
          register: ping_output
          failed_when: ping_output.rc != 0
          ignore_errors: true

        - name: Verificar disponibilidad de repositorios
          command: dnf repolist
          register: repo_status
          failed_when: repo_status.rc != 0
          ignore_errors: true

        - name: Instalar paquetes requeridos
          yum:
            name:
              - net-tools
              - haproxy
              - keepalived
            state: present

        - name: Crear grupo y usuario haproxy
          block:
            - name: Crear grupo haproxy si no existe
              group: { name: haproxy, state: present }

            - name: Crear usuario haproxy si no existe
              user:
                name: haproxy
                group: haproxy
                shell: /sbin/nologin
                system: yes
                create_home: no
                state: present

    - name: Configurar directorios y SELinux
      block:
        - name: Crear directorio para el socket de HAProxy
          file:
            path: "{{ haproxy_socket_dir }}"
            state: directory
            owner: haproxy
            group: haproxy
            mode: "0750"

        - name: Restaurar contexto SELinux para socket
          command: restorecon -RFv {{ haproxy_socket_dir }}
          when: ansible_selinux.status == "enabled"
          ignore_errors: true

        - name: Establecer contexto SELinux para el socket
          sefcontext:
            target: "{{ haproxy_socket_dir }}(/.*)?"
            setype: var_run_t
            state: present
          when: ansible_selinux.status == "enabled"
          ignore_errors: true

        - name: Permitir a HAProxy conectarse a cualquier puerto
          command: setsebool -P haproxy_connect_any 1
          when: ansible_selinux.status == "enabled"
          ignore_errors: true

    - name: Preparar unidad de HAProxy
      block:

        - name: Detener HAProxy si está activo
          systemd:
            name: haproxy
            state: stopped
          ignore_errors: true

        - name: Eliminar socket anterior de HAProxy
          file:
            path: "{{ haproxy_socket_file }}"
            state: absent

        - name: Crear directorio override systemd
          file:
            path: /etc/systemd/system/haproxy.service.d
            state: directory
            mode: "0755"

        - name: Crear sobreescritura systemd para HAProxy
          copy:
            dest: /etc/systemd/system/haproxy.service.d/override.conf
            content: |
              [Service]
              ExecStart=
              ExecStart=/usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg
              RuntimeDirectory=haproxy
              RuntimeDirectoryMode=0750
              User=haproxy
              Group=haproxy
              AmbientCapabilities=CAP_NET_BIND_SERVICE
              CapabilityBoundingSet=CAP_NET_BIND_SERVICE
              PrivateTmp=true
              ProtectSystem=full
              NoNewPrivileges=true
          notify: Recargar systemd

    - name: Recargar systemd
      command: systemctl daemon-reexec

    - name: Detectar interfaz activa para Keepalived
      command: ip route get 8.8.8.8
      register: default_route

    - name: Definir interfaz para Keepalived
      set_fact:
        keepalived_interface: "{{ default_route.stdout.split('dev')[1].split()[0] }}"

    - name: Configurar HAProxy
      block:
        - name: Crear directorio de configuración
          file:
            path: "{{ haproxy_config_dir }}"
            state: directory
            mode: "0755"

        - name: Plantilla de configuración
          template:
            src: "{{ haproxy_config_template }}"
            dest: "{{ haproxy_config_dir }}/haproxy.cfg"
            owner: root
            group: root
            mode: "0644"
          notify: Reiniciar HAProxy

        - name: Validar configuración HAProxy
          command: haproxy -c -f {{ haproxy_config_dir }}/haproxy.cfg
          register: haproxy_check
          failed_when: haproxy_check.rc != 0
          changed_when: false

    - name: Configurar Keepalived
      block:
        - name: Crear directorio
          file:
            path: "{{ keepalived_config_dir }}"
            state: directory
            mode: "0755"

        - name: Plantilla de configuración
          template:
            src: "{{ keepalived_config_template }}"
            dest: "{{ keepalived_config_dir }}/keepalived.conf"
            owner: root
            group: root
            mode: "0644"
          notify: Reiniciar Keepalived

    - name: Habilitar Keepalived
      systemd:
        name: keepalived
        enabled: true
        state: started

    - name: Habilitar HAProxy sin arrancar
      systemd:
        name: haproxy
        enabled: true
        state: stopped

    - name: Esperar a que VIP esté disponible (6443)
      wait_for:
        host: "{{ api_vip }}"
        port: 6443
        delay: 5
        timeout: 30
      ignore_errors: true

    - name: Verificar si alguna VIP está activa
      shell: |
        ip a | grep -q "{{ api_vip }}" || ip a | grep -q "{{ second_vip }}"
      register: vip_ready
      changed_when: false
      failed_when: false

    - name: Ajustar permisos del socket si ya existe
      file:
        path: "{{ haproxy_socket_file }}"
        owner: haproxy
        group: haproxy
        mode: "0660"
      when: vip_ready.rc == 0
      ignore_errors: true

    - name: Iniciar HAProxy solo si alguna VIP está activa
      block:
        - name: Iniciar HAProxy manualmente con log si falla
          shell: |
            systemctl restart haproxy || (journalctl -xeu haproxy --no-pager -n 50 && exit 1)
          register: haproxy_restart_log
          failed_when: haproxy_restart_log.rc != 0
          changed_when: true

        - name: Mostrar salida si falló
          debug:
            var: haproxy_restart_log.stdout_lines
          when: haproxy_restart_log.rc != 0
      when: vip_ready.rc == 0

  handlers:
    - name: Recargar systemd
      command: systemctl daemon-reexec

    - name: Reiniciar HAProxy
      systemd:
        name: haproxy
        state: restarted

    - name: Reiniciar Keepalived
      systemd:
        name: keepalived
        state: restarted